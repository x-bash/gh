# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gh_org(){
    param:scope     "github/$O"
    param:dsl       '
subcmd:
    info                    "Show information"
    repo                    "List all repos"
    member                  "member management"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        gh_log error "Command Not Found. Show help."
        return 0
    fi
      
    "___x_cmd_gh_org_${PARAM_SUBCMD}" "$@"
}


___x_cmd_gh_org_info() {
    param:scope     "github/$O"
    param:dsl       '
type: 
options:
    --admin      "admin"       <>:bool=false
'
    param:run

    if [ $# -eq 0 ]; then
        ___x_cmd_gh_get_multi "/user/orgs" page per_page
        [ $? -eq 1 ] && return 1
    else
        ___x_cmd_gh_get "/orgs/${1:?Provide organization}"
        [ $? -eq 1 ] && return 1
    fi
    return 0
}

___x_cmd_gh_org_repo(){
    param:dsl       '
subcmd:
    ls          "list repo"
    create      "org repo create"
'
    param:run
    if [ -z "$PARAM_SUBCMD" ]; then
        gh_log error "Command Not Found. Show help."
        return 0
    fi
    "___x_cmd_gh_org_repo_${PARAM_SUBCMD}" "$@"
}

___x_cmd_gh_org_repo_ls() {
    param:scope     "github/$O"
    param:dsl       '
options:
    --type     "type"     <>="all"    = all private public
'
    param:run
    # ui table func ___x_cmd_gh_table "\"\$(O=$O ___x_cmd_gh_get_multi \"/v5/orgs/${1:?Provide organization}/repos\" type)\"" \
    #     . id full_name ownerName=owner.name updatedTime="updated_at"
    ___x_cmd_gh_get_multi "/orgs/${1:?Provide organization}/repos" type
}

# Section: Member

___x_cmd_gh_org_member(){
    param:dsl       '
subcmd:
    ls            "list member"
    user            "get org member user info"
    add             "add member"
    del|remove      "Remove member"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        echo "subcommand not found. show help." >&2
        return 0
    fi
    
    "___x_cmd_gh_org_member_$PARAM_SUBCMD" "$@"
}

___x_cmd_gh_org_member_ls() {
    param:scope     "github/$O"
    param:dsl       '
options:
    #1|--org        "org space address"    <>:address
    --filter        "Filter members returned in the list."  <>="all"
    --role          "Repo name"            <>="all"         = admin member all
'
    param:run
    ___x_cmd_gh_get_multi "/orgs/${org##*/}/members" role page per_page  
}

___x_cmd_gh_org_member_user() {
    param:scope     "github/$O"
    param:dsl      '
options:
    #1|--org            "org space address"         <>:address
    --username          "username:space address"    <>:name
'
    param:run

    ___x_cmd_gh_get "/orgs/${org##*/}/memberships/${username##*/}"  
}

___x_cmd_gh_org_member_add() {
    param:scope     "github/$O"
    param:dsl       '
type: 
    role = admin member
options:
    --org           "org"       <>:address
    --role          "role"      <>:role="member"
    #n              "username"
'
    param:run

    # repo="$(___x_cmd_gh_param_normalize_repo "$repo")" || return 1
    if [ -z "$1" ];then
        echo "At least one user’s spatial address is needed"
        return 1
    fi

        for username in "$@"; do
        {
            ___x_cmd_gh_put_json "/orgs/${org##*/}/memberships/${username##*/}" role
            local code=$?
            if [ $code -ne 0 ]; then
                echo "Creating repo failure: $username. Code is $code. " >&2
                return $code
            fi
        }  
    done
}

___x_cmd_gh_org_member_del() {
    param:scope     "github/$O"
    param:dsl       '
options:
    --org       "org space address"         <>:address
    #n          "username"
'
    param:run

    if [ -z "$1" ];then
        echo "At least one user’s spatial address is needed"
        return 1
    fi

    local username
    for username in "$@"; do
        {
            ___x_cmd_gh_delete "/orgs/${org##*/}/memberships/${username##*/}"
            code=$?
            if [ $code -ne 0 ]; then
                echo "Creating repo failure: $name. Code is $code. " >&2
                return $code
            fi
        }  
    done
}


# EndSection

